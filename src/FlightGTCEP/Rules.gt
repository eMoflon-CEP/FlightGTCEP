import "platform:/resource/Flights/model/Flights.ecore"

pattern airport() {
	airport: Airport
}

pattern gate() refines airport{
	gate : Gate
	airport : Airport {
		-gates->gate
	}
}

pattern route() {
	route : Route
}

pattern plane() {
	plane : Plane
}

pattern travel() {
	travel : Travel
}

/*
 * track new/updated flights in a pattern for Apama to filter delayed flights
 */
pattern flight() {
	route: Route
	flight: Flight {
		-route->route
		-plane->plane
	}
	plane : Plane
}

/*
 * track passengers in flights -> remaining capacity
 */
pattern travelWithFlight refines flight{
	travel : Travel
	flight: Flight {
		-travels->travel
	}
	
}

/*
 * track updated flights departure times
 */
pattern flightWithDeparture refines flight{
	flight: Flight {
		-departure->departure
	}
	departure : TimeStamp
}

/*
 * track updated flights source airports
 */
pattern flightWithSource refines flightWithDeparture {
	route : Route {
		-src->source
	}
	source : Airport
}

/*
 * track updated flights arrival times
 */
pattern flightWithArrival refines flight{
	flight: Flight {
		-arrival->arrival
	}
	arrival : TimeStamp
}

/*
 * track updated flights target airports
 */
pattern flightWithTarget refines flightWithArrival {
	route : Route {
		-trg->target
	}
	target : Airport
}


/*
 * find travels with connecting flights
 */
pattern travelHasConnectingFlight {
	transitAirport: Airport {
		-gates->arrivalGate
		-gates->departingGate	
	}
	arrivalGate: Gate
	departingGate: Gate
	
	route: Route {
		-trg -> transitAirport
	}
	flight: Flight {
		-route -> route
		-trg -> arrivalGate
	}
	connectingRoute: Route {
		-src -> transitAirport
	}
	connectingFlight: Flight {
		-route -> connectingRoute
		-src -> departingGate
	}
	travel: Travel {
		-flights -> flight
		-flights -> connectingFlight
	}
}

/*
 * finds possible alternatives for connecting flights
 */
pattern connectingFlightAlternative() refines travelHasConnectingFlight {
	replacementFlight: Flight {
		-departure->replacementDeparture
		-route -> replacementRoute
		-src -> replacementDepartingGate
	}
	
	replacementDeparture : TimeStamp {
		.time > flightArrival.time
	}
	
	replacementRoute: Route {
		-trg -> targetAirport
		-src -> transitAirport
	}
	
	replacementDepartingGate: Gate
	
	flight: Flight {
		-arrival->flightArrival
	}
	
	flightArrival : TimeStamp
	
	transitAirport: Airport {
		-gates->replacementDepartingGate
	}
	
	targetAirport: Airport
	
	connectingRoute: Route {
		-trg -> targetAirport
	}

}

/* 
 * finds alternative direct flights for connecting flights
 */
pattern connectingFlightDirectAlternative() refines travelHasConnectingFlight{
	route : Route {
		-src->src
	}
	
	connectingRoute : Route {
		-trg->trg
	}
	
	replacementFlight : Flight{
		-route->replacementRoute
	}
	
	replacementRoute : Route{
		-src->src
		-trg->trg
	}
	
	src : Airport
	trg : Airport
}

/* 
 * finds direct flights along with their src and trg airports
 */
pattern directFlight() refines flight{
	travel : Travel {
		-flights->flight
	}
	
	route : Route {
		-src->src
		-trg->trg
	}
	
	src : Airport
	trg : Airport
}

/* 
 * finds connected alternatives to direct flights
 */
pattern directFlightConnectingAlternative() refines directFlight {
	
	transitAirport : Airport {
		-gates->gate1Arrival
		-gates->gate2Departure
	}
	
	flight1 : Flight {
		-route->route1
		-trg->gate1Arrival
		-arrival->flight1Arrival
	}
	
	gate1Arrival : Gate
	
	
	flight1Arrival : TimeStamp
	
	route1 : Route {
		-src->src
		-trg->transitAirport
	}
	
	flight2 : Flight {
		-route->route2
		-src->gate2Departure
		-departure->flight2Departure
	}
	
	gate2Departure : Gate
	
	flight2Departure : TimeStamp {
		.time >= flight1Arrival.time
	}
	
	route2 : Route {
		-src->transitAirport
		-trg->trg
	}
}